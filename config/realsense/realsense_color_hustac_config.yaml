%YAML:1.0

#common parameters
imu_topic: "/camera/imu/data"
image_topic: "/camera/color/image_raw"
odom_topic: "/base/odom"
output_path: "/home/hustac/output/"

#camera calibration 
model_type: PINHOLE
camera_name: camera
image_width: 640
image_height: 480
distortion_parameters:
   k1: 0.11816724463284349
   k2: -0.25070943014513336
   p1: -0.0004410376752765858
   p2: 0.00028238523182565434
projection_parameters:
   fx: 617.9125775470295
   fy: 618.5388706342017
   cx: 316.0682645282202
   cy: 244.95553345979613

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.                        
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam
extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [ 0.9991,   -0.0395,    0.0124,
           0.0393,    0.9992,    0.0098, 
          -0.0128,   -0.0093,    0.9999]
#Translation from camera frame to imu frame, imu^T_cam
extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [0.0970, 0.0084, -0.0002]

# Extrinsic parameter between IMU and WheelOdometry (base_link).
# Calibrated T^wheelodom_imu:
#     translation:  0.110219 0.0602086     0.575
#     YPR:         -88.7982  -2.6373 -91.1273
#  0.0209511 -0.0187043   0.999606   0.110219
#  -0.998721  -0.046407  0.0200642  0.0602086
#  0.0460134  -0.998747 -0.0196527      0.575
#          0          0          0          1
# Calibrated T^imu_wheelodom:
#  0.0209511  -0.998721  0.0460134  0.0313647
# -0.0187043  -0.046407  -0.998747   0.579135
#   0.999606  0.0200642 -0.0196527  -0.100083
#          0          0          0          1

extimate_extrinsic_odom: 0
#Rotation from odom frame to imu frame, imu^R_odom
extrinsicOdomRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [  0.0209511,  -0.998721,   0.0460134,
           -0.0187043,  -0.046407,  -0.998747,
            0.999606,    0.0200642, -0.0196527]
#Translation from camera frame to imu frame, imu^T_odom
extrinsicOdomTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [ 0.0313647,  0.579135, -0.100083]

#feature traker paprameters
max_cnt: 150            # max feature number in feature tracking
min_dist: 25            # min distance between two features
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 0             # if image is too dark or light, trun on equalize to find enough features
fisheye: 0              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points

#optimization parameters
max_solver_time: 0.03  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.1          # accelerometer measurement noise standard deviation. #0.2
gyr_n: 0.01         # gyroscope measurement noise standard deviation.     #0.05
acc_w: 0.0002       # accelerometer bias random work noise standard deviation.  #0.02
gyr_w: 2.0e-5       # gyroscope bias random work noise standard deviation.     #4.0e-5
g_norm: 9.805       # gravity magnitude

#wheel odometry parameters
wheel_min_n: 0.002   # wheel odom mininum error stardard deviation (due to wheel encoder's disatema)
wheel_n: 0.01        # wheel odom error stardard deviation per meter
base_radius: 0.0     # (wheel speed when moving 1 m/s) / (wheel speed when rotating 1 rad/s), unit: meter/rad
base_z_n: 0.005      # base position axis z noise standard deviation, unit: meter
base_rp_n: 0.001     # base roll & pitch angle noise standard deviation, unit: rad
use_odom: 2          # 0: not use odom factor, 
                     # 1: use only inter-frame odom factor
                     # 2: use only begin-end-frame odom factor
                     # 3: use both inter-frame odom factor and begin-end-frame odom factor

#loop closure parameters
loop_closure: 0                    # start loop closure
fast_relocalization: 1             # useful in real-time and large project
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
pose_graph_save_path: "/home/hustac/output/pose_graph/" # save and load path

#unsynchronization parameters
estimate_td: 1                      # online estimate time offset between camera and imu
td: 0.013                             # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)
estimate_odom_td: 0                 # online estimate time offset between odom and imu
odom_td: 0.0                        # initial value of time offset. unit: s. readed odom clock + td = real odom clock (IMU clock)

#rolling shutter parameters
rolling_shutter: 1                  # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0.033               # unit: s. rolling shutter read out time per frame (from data sheet).

#visualization parameters
save_image: 1                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4      # size of camera marker in RVIZ
