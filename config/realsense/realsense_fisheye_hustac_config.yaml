%YAML:1.0

#common parameters
imu_topic: "/camera/imu/data"
image_topic: "/camera/fisheye/image_raw"
output_path: "/home/hustac/output/"

#camera calibration 
model_type: MEI
camera_name: fisheye
image_width: 640
image_height: 480
mirror_parameters:
   xi: 1.7425500436410966
distortion_parameters:
   k1: -0.0777216768779867
   k2: 0.27313136929382853
   p1: -0.0023801200837346827
   p2: 0.0031202650112331413
projection_parameters:
   gamma1: 761.9519174928993
   gamma2: 761.4240116807508
   u0: 309.9922373171858
   v0: 234.27447300350485

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.                        
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam
extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [0.99875741, -0.04979306, -0.00207161,
          0.04981028,  0.99871529,  0.00931133, 
          0.00160531, -0.00940295,  0.9999545 ]
#Translation from camera frame to imu frame, imu^T_cam
extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [0.00929952, 0.00520309, 0.00386146]

# Extrinsic parameter between IMU and WheelOdometry (base_link).
# q_odom2body = quaternion_from_euler(-91.0 / 180 * math.pi, -2.6 / 180 * math.pi, -90.0 / 180 * math.pi)
# t_odom2body = (0.08, 0.06, 0.57)
# T_body2odom =
# [[  2.86741394e-16  -9.98970570e-01   4.53629881e-02   3.40813310e-02]
#  [ -1.74524064e-02  -4.53560791e-02  -9.98818422e-01   5.73444058e-01]
#  [  9.99847695e-01  -7.91693306e-04  -1.74344404e-02  -7.00026830e-02]
#  [  0.00000000e+00   0.00000000e+00   0.00000000e+00   1.00000000e+00]]
extimate_extrinsic_odom: 0
#Rotation from odom frame to imu frame, imu^R_odom
extrinsicOdomRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [ 2.86741394e-16,  -9.98970570e-01,   4.53629881e-02,
          -1.74524064e-02,  -4.53560791e-02,  -9.98818422e-01, 
           9.99847695e-01,  -7.91693306e-04,  -1.74344404e-02]
#Translation from camera frame to imu frame, imu^T_odom
extrinsicOdomTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [3.40813310e-02, 5.73444058e-01, -7.00026830e-02]

#feature traker paprameters
max_cnt: 150            # max feature number in feature tracking
min_dist: 30            # min distance between two features
freq: 10                 # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 0             # if image is too dark or light, trun on equalize to find enough features
fisheye: 0              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points

#optimization parameters
max_solver_time: 0.03  # max solver itration time (ms), to guarantee real time
max_num_iterations: 16   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.08          # accelerometer measurement noise standard deviation. #0.2   0.04
gyr_n: 0.004         # gyroscope measurement noise standard deviation.     #0.05  0.004
acc_w: 0.00004         # accelerometer bias random work noise standard deviation.  #0.02
gyr_w: 2.0e-6       # gyroscope bias random work noise standard deviation.     #4.0e-5
g_norm: 9.805    # gravity magnitude

#loop closure parameters
loop_closure: 1                    # start loop closure
fast_relocalization: 1             # useful in real-time and large project
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
pose_graph_save_path: "/home/hustac/output/pose_graph/" # save and load path

#unsynchronization parameters
estimate_td: 1                      # online estimate time offset between camera and imu
td: 0.0167                             # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#rolling shutter parameters
rolling_shutter: 0                  # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0               # unit: s. rolling shutter read out time per frame (from data sheet). 

#visualization parameters
save_image: 1                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4      # size of camera marker in RVIZ